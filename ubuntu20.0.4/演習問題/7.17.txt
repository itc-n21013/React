7-1
re.compile()

7-2
バックスラッシュでエスケープさせる必要がなくなる
文字列のクォート前にrを書いてraw文字列を指定し文字をエスケープしないようにすれば簡潔に書けるから

7-3
パターンが見つかればMatchオブジェクト
パターンが見つからなければNone

7-4
group()メソッドを使う

7-5
(\d\d\d)-(\d\d\d-\d\d\d\d)…グループ0
(\d\d\d)…グループ1
(\d\d\d-\d\d\d\d)…グループ2

7-6
バックスラッシュを使って(と)をエスケープ
raw文字列の中で\(や\)と書く

7-7
正規表現にグループがない場合にリスト
正規表現にグループがあるとタプル

7-8
どちらでもよい

7-9
任意のマッチ
非貪欲マッチを表す

7-10
+ 1回以上マッチ
* 0回以上にマッチ

7-11
{3} グループの3回の出現にマッチ
{3,5} 3~5回の出現にマッチ

7-12
\d 0~9の数字
\w 文字、数字、下線
\s スペース、タブ、改行

7-13
\D 0~9の数字以外
\W 文字、数字、下線以外
\S スペース、タブ、改行以外

7-14
re.IGNORECASE or re.Iオプションを渡す

7-15
改行以外の任意の文字とマッチ。
ドット文字が改行を含むすべての文字とマッチ

7-16
.* 改行以外のあらゆる文字列とマッチ(長い文字列とマッチ)
.*? 非貪欲モードとマッチ

7-17
[0-9a-z]

7-18
'Xdrummers, X pipers, five rings, X hens'

7-19
冗長モードを指定

7-20
num = re.compile(r'^\d{1,3}'(,\d{3})*$')

7-21
name = re.compile(r'[A-Z][a-zA-Z]*\sNakamoto')

7-22
name = re.compile(r'(Alice|Bob|Carol)\s(eats|pets|throws)\s(apples|cats|baseballs)\.*, re.I)